Ques- What happens when you hit Www.google.com on our browser? what goes behind the scene?
    
    Client side(Mobile,browser) , server side (available over the netwroks)
    -we need to fetch the IP Address of google servers.
    -our browser does the DNS(DOMAIN NAME SERVER) query.
    {DNS- KEY,VALUE PAIR}
    -for every URL(Booking.com,facebook.com etc) this DNS has some mapping of the corresponding IP Addresses.
    -there is also a cache memory (local copy)of DNS in our browser.
    -first browser checks in local cache ,if yes then goes to DNS and proceed.
    -if not then it goes to ISP(internet service provider) (DNS) and then gets the IP.
    -ISP also contains a copy of ip and url mapping.
                -(DNS-Tree based structure.)
        
    once we have the IP Address of Google.com ,do we directly hit the server?no
    IP Address-> Load Balancer - choose the most healthy server(RPC Servers,application server etc)--(microservices,caching,3rd party services etc)-then finally hit the google server


        #Tech stack for Backend Development
                -JS
                -NodeJS
                -ExpressJS
                -ORM
                -SQL/NOSQL DB
                -microservices
                -Testing
                -AWS S3 , EC2 , Beanstalk


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
#Introduction to JS
    -Original name was Ecmascript.
    -4 pillars of javascrip     
            -coercion
            -scopes
            -oops
            -async nature of js


#1Coercion - Type conversion
        -whenever we do an operation based on the input , we can actually convert(convert type of input) the input for the operation.
        this conversion can be done manually(explicit type casting/conversion) or the language based on certain rules automatically(implicit type casting) converts the type.
        implicit type conversion is also called coercion.

  #1.1Abstract operations 
    -these are some sort of algorithm that are present in the Ecmascript docs.but these are not avialble for usage in Ecmascript i.e we developer cant use these operation directly.
    -not a part of Ecmascript(javascript) language.
    -they are defined here to solely aid the specification of semantics of Ecmascript language.
    -in the ecma docs there are a lot of things that are done by the language internally.to explain these internal details of how and what language is doing, we have abstract operation.
   #1.1.1 - Type conversion
        the Ecmascript language implicitly performs automatatic type conversion using abstract operation.
        these abstract operation takes valid js data types(primitive as well as non primitive ) as input.

    #1.1.2 - ToNumber abstract operation
        -whatever argument is passed to ToNumber ,it converts it to ToNumber
        i.e if argument is undefiend - it converts into NaN
            -Null - +0
            -Boolean -true-1
                     -FALSE-0
            -Number - Number
         Ques- why undefiend converts into nan and null into +0;
                these are from language semantics.
    
    -js converts a string to number character by character
    
- if argument type is symbol, it throws error.
- if argument type is object in abstract operation then it does two thing 1. ToPrimitive
                                                                            2. ToNumber


#ToPrimitive Abstract operation
    -ToPrimitive(INPUT,PREFERRED TYPE ARGS(Optional))
    -CONVERTS ITS INPUT ARGS TO NON OBJECT TYPE(NUMBER,STRING,BOOLEAN ETC)
    -if input is capable of converting into multiple types in this case we take the decision using preferred type arhs i.e hint
    -if the type of input is not object then it directly returns that value.
    -if the input type is an object then 
                                        CASE 1-if prefeeredd type is not given
                                                                hint -"default" --default is just a state
                                        else if - if preferred type is a string
                                                                hint -"string"
                                        else if - if preferred type is a number 
                                                                hint -"number
            if the variable hint is still default then set it to "number".
           
                                                        Assert: input is an ECMAScript language value.
                                            If Type(input) is Object, then
                                                 If PreferredType is not present, let hint be "default".
                                                 Else if PreferredType is hint String, let hint be "string".
                                                 Else PreferredType is hint Number, let hint be "number".
                                                Let exoticToPrim be ? GetMethod(input, @@toPrimitive).
                                                If exoticToPrim is not undefined, then
                                                        Let result be ? Call(exoticToPrim, input, « hint »).
                                                         If Type(result) is not Object, return result.
                                                         Throw a TypeError exception.
                                                If hint is "default", set hint to "number".
                                                Return ? OrdinaryToPrimitive(input, hint).
                                            Return input.

    OrdinaryToPrimitive
            OrdinaryToPrimitive(O,hint);
            IF O is an object 
                            if hint is string - string ,"number" string
                            we create an array and inside that array (mathodnames)we store ["tostring,"valueof]
                            if string "number , the array be ["valueof","tostring"].
                            step1- it fetches tostring function and store the result in variable result.
                                    -if the type of the result is not object then we return thats result,otherwise we go back to lopp and keep iterating i.e value of function if it also give non object type value then return .
                                * same case with "number " 
                                        - call to value and then call tostring
                            else{
                                return typem exception error
                            }
        
            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    #ToBoolean abstract operation:
        ToBoolean(argument);
            if argument is passed "undefiend"- returns false
             if argument is passed "Null"- returns false
             if argument is passed "Boolean"-returns argument
             if argument is passed "Number( +0,-0,NaN)"-returns FALSE,else true
             if argumemt is passed empty string - returns false
        undefiend,null,+0,-0,false,empty string - these are falsy values , if passed to ToBoolean,returns false;
         -29- truthy value, ToBoolean would return true.


#Abstract equality and strict equality comparison
        -both checks the types of the operands.
        AEC(undefiend,null)- returns true
        AEC(Number,String)-returns AEC(Number,ToNumber(string)-again does the comparison)
         AEC(String,Number)-returns AEC(ToNumber(string),Number-again does the comparison)
         AEC(Boolean,-)- conerts boolean tonumber ,doesnt matter the second args inmput is-and again do the comparison.
         AEC((String,number,symbol),obj)-toprimitve on obj and then again compare
           AEC(obj,(String,number,symbol))-toprimitve on obj and then again compare

    #strict equality comparison
        if type of x and type of y are diff-return  immediately false
            if x is a number :
                    if x is Nan - dont care what the value of y is just return false
                    if y is Nan -dont care what the value of x is just return false
                    SEC(0,-0)-returns true
                    sec(-0,0)-returns true
            if other than number then call samevaluenonnumber();
            typeof x is undefiend=return true;
            typeof x is null - return true;
            typeof x is string , do lenght wise and charcer by character comparison.
            typeof x is symbol, typeof y is also symbol-return true


#ToString abstract operation
        ToString(argumemt);
        undefiend-undefiend
        null-null
        number-calls numbertostring();
        string-return argumemt;
        symbol-TypeError
        boolean -return true/false
        obj-call toprimitve(with hint string)-calls tostring();
        


            

         


            


  

